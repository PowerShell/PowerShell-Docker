parameters:
  vmImage: 'ubuntu-16.04'
  jobName: 'none'
  releaseTag: ''
  ACR: 'no'
  maxParallel: 5
  dependsOn: []

jobs:
- job: ${{ parameters.jobName }}
  dependsOn:
    ${{ parameters.dependsOn }}
  strategy:
      matrix: $[ ${{ parameters.matrix }} ]
      maxParallel: ${{ parameters.maxParallel }}
  variables:
    dockerImage: 'powershell'
    Channel: ${{ parameters.channel }}
    ACR: ${{ parameters.ACR }}
    releaseTag: ${{ parameters.releaseTag }}

  pool:
    vmImage: ${{ parameters.vmImage }}
  timeoutInMinutes: 135

  displayName: ${{ parameters.jobName }}

  steps:
  - pwsh: |
      Write-Host "##vso[task.setvariable variable=ACR_NAME;]$env:ACR_NAME_VAR"
    displayName: 'Enable ACR'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - powershell: |
      switch('$(Channel)') {
        'stable' {
          $releaseTag = '$(stableReleaseTag)'
          $version = '$(stableReleaseTag)' -replace '^v', ''
        }
        'preview' {
          $releaseTag = '$(previewReleaseTag)'
          $version = '$(previewReleaseTag)' -replace '^v', ''
        }
        'lts' {
          $releaseTag = '$(ltsReleaseTag)'
          $version = '$(ltsReleaseTag)' -replace '^v', ''
        }
        default {
          throw "Unknown channel '$(Channel)'"
        }
      }
      $namespace = $releaseTag.ToLowerInvariant()
      Write-Host "##vso[task.setvariable variable=dockerNamespace;]$namespace"
      $version = $releaseTag -replace '^v', ''
      $command = "vso[task.setvariable variable=version]$version"
      Write-Host $command
      Write-Host "##$command"
    displayName: 'Set Version'
    name: get
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      Get-ChildItem env: | Out-String -Width 1000
    displayName: 'Capture Environment'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: 'docker login $(dockerHost) -u $(dockerUserName) -p $(dockerKey)'
    displayName: 'docker login'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: ' az login --service-principal -u $(az_url) -p $(az_key) --tenant $(az_name)'
    displayName: 'az login'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      az account set --subscription $(StorageSubscriptionName)
      $querystring = az storage account generate-sas --account-name $(StorageAccount) --services b --resource-types o --expiry ((get-date).AddDays(1).ToString("yyyy-MM-dd")) --permission r --https-only | convertfrom-json
      $url = "https://$(StorageAccount).blob.core.windows.net/?$querystring"
      Write-Host "##vso[task.setvariable variable=SasUrl;]$url"
    displayName: 'Set SasUrl variable'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: 'Install-module pester -Scope CurrentUser -Force -SkipPublisherCheck'
    displayName: 'Install Pester'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      az account set --subscription $(AcrSubscriptionName)
      $extraParams = @{}
      if($env:ACR -eq 'no')
      {
        Write-Host 'Not in ACR, will push...'
        $extraParams.Add('Push',$true)
      }
      else
      {
        Write-Host 'Using ACR, will NOT test behavior...'
        $extraParams.Add('SkipTest',$true)
      }

      if($env:SASURL)
      {
        Write-Host 'Using SasUrl...'
        $extraParams.Add('SasUrl',$env:SASURL)
      }

      ./build.ps1 -Build -ImageName $(dockerHost) -name '$(ImageName)' -Channel $(channel) -TestLogPostfix '$(ImageName)-$(Channel)' @extraParams -version '$(Version)' -Repository $(dockerNamespace)/$(dockerImage)
    displayName: 'Build All $(Channel)'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: 'docker logout $(dockerHost)'
    displayName: 'docker logout'
    condition: and( always(), ne(variables['Channel'],''))

  - pwsh: 'az logout'
    displayName: 'az logout'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))
    inputs:
      sourceScanPath: '$(Build.SourcesDirectory)'
      snapshotForceEnabled: true
