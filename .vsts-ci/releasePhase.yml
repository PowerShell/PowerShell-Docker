parameters:
  - name: vmImage
    default: PSMMSUbuntu20.04-Secure
  - name: jobName
    default: 'none'
  - name: releaseTag
    default: ''
  - name: ACR
    default: 'No'
  - name: maxParallel
    default: 5
  - name: dependsOn
    default: []
    type: object
  - name: matrix
  - name: pool
    default: PowerShell1ES
  - name: imageVersion
    default: 'latest'

jobs:
- job: ${{ parameters.jobName }}
  dependsOn:
    ${{ parameters.dependsOn }}
  strategy:
      matrix: $[ ${{ parameters.matrix }} ]
      maxParallel: ${{ parameters.maxParallel }}
  variables:
  - name: dockerImage
    value: 'powershell'
  - name: ACR
    value: ${{ parameters.ACR }}
  - name: releaseTag
    value: ${{ parameters.releaseTag }}
  - name: scanType
    value: Register
  - group: Azure Blob Variable Group

  pool:
    name: ${{ parameters.pool }}
    demands:
      - ImageOverride -equals ${{ parameters.vmImage }}
      - ${{ if ne(parameters.imageVersion, 'latest') }}:
        - ImageVersionOverride -equals ${{ parameters.imageVersion }}


  timeoutInMinutes: 135

  displayName: ${{ parameters.jobName }}

  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 7.x

  - pwsh: |
      dotnet --list-sdks
    displayName: dotnet info
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      if (!(get-Command -name 'az' -errorAction SilentlyContinue)) {
        Write-Host "Installing Az CLI"
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      }
    displayName: Install Azure CLI
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadType: specific
      itemPattern: buildMeta/**/*.json

  - powershell: |
      $json = Get-ChildItem $(System.ArtifactsDirectory)/buildmeta.json -recurse -File
      if($json.Count -ge 1)
      {
        $jsonText = Get-Content -Path $json.FullName
        $fullTag = ($jsonText | ConvertFrom-Json).FullTag
        Write-Verbose "setting FULL_TAG to $fullTag" -verbose
        Write-Host "##vso[task.setvariable variable=FULL_TAG;]$fullTag"
      }
      else{
        Write-Verbose "Did not find buildmeta json" -verbose
      }
    displayName: Set FULL_TAG variable

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=ACR_NAME;]$env:ACR_NAME_VAR"
    displayName: 'Enable ACR'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - template: ./templatesGeneric/setVersionStepsTemplate.yml

  - pwsh: |
      Get-ChildItem env: | Out-String -Width 1000
    displayName: 'Capture Environment'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      docker login $(dockerHost) -u $(dockerUserName) -p $(dockerKey)
    displayName: 'docker login $(dockerHost)'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      if($env:ACR -eq 'yes')
      {
        Write-Host 'Using ACR, will need to az login'
        az login --service-principal -u $(az_url) -p $(az_key) --tenant $(az_name)
      }
    displayName: 'az login'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      $modules = 'Az.Accounts', 'Az.Storage'
      foreach ($module in $modules) {
        if (!(Get-Module $module -listavailable)) {
          Write-Host "installing $module..." -verbose
          Install-Module $module -force -allowclobber
        } else {
          Write-Host "$module is already installed" -verbose
        }
      }
    displayName: 'Install AzAccounts'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: '$(AzureFileCopySubscription)'
      scriptType: inlineScript
      azurePowerShellVersion: latestVersion
      pwsh: true
      inline: |
        $containerName = Out-String -InputObject $(DOCKERNAMESPACE) -NoNewline
        $containerName = $containerName.Replace('.', '-')
        $context = New-AzStorageContext -StorageAccountName $(StorageAccount)
        $querystring = New-AzStorageContainerSASToken -Context $context -Name $containerName -Permission r -ExpiryTime ((get-date).AddMinutes(180)) -Protocol HttpsOnly
        $uriBuilder = [System.UriBuilder]::new("https://$(StorageAccount).blob.core.windows.net")
        $uriBuilder.Query = $querystring.ToString()
        $url = $uriBuilder.ToString()
        Write-Host "##vso[task.setvariable variable=SasUrl;]$url"
    displayName: 'Set SasUrl variable'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: Install-module Pester -Scope CurrentUser -Force -MaximumVersion 4.99
    displayName: 'Install Pester'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      $extraParams = @{}
      if($env:ACR -eq 'no')
      {
        Write-Host 'Not in ACR, will push...'
        $extraParams.Add('Push',$true)
      }
      else
      {
        az account set --subscription $(AcrSubscriptionName)
        Write-Host 'Using ACR, will NOT test behavior...'
        $extraParams.Add('SkipTest',$true)
      }

      if($env:SASURL)
      {
        Write-Host 'Using SasUrl...'
        $extraParams.Add('SasUrl',$env:SASURL)
      }

      ./build.ps1 -Build -ImageName $(dockerHost) -name '$(ImageName)' -Channel $(channel) -TestLogPostfix '$(ImageName)-$(Channel)' @extraParams -version '$(Version)' -Repository $(dockerNamespace)/$(dockerImage)
    displayName: 'Build All $(Channel)'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      dockerImagesToScan: $(dockerImagesToScan)
      scanType: $(scanType)
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
      failOnAlert: true
    displayName: Component Governance - $(ImageName) $(Channel)
    condition: and( succeededOrFailed(), ne(variables['Channel'],''), eq(variables['pool'],'PowerShell1ES'), ne(variables['ACR'],'No'))

  - pwsh: 'docker logout $(dockerHost)'
    displayName: 'docker logout'
    condition: and( always(), ne(variables['Channel'],''))

  - pwsh: |
      if($env:ACR -eq 'yes')
      {
        Write-Host 'Using ACR, will need to az logout'
        az logout
      }
    displayName: 'az logout'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))
    inputs:
      sourceScanPath: '$(Build.SourcesDirectory)'
      snapshotForceEnabled: true
