parameters:
  pool: 'Hosted Ubuntu 1604'
  channel: 'stable'
  jobName: 'none'
  releaseTag: ''
  ACR: 'no'

jobs:
- job: ${{ parameters.jobName }}
  variables:
    dockerImage: 'powershell'
    Channel: ${{ parameters.channel }}
    ACR: ${{ parameters.ACR }}
    releaseTag: ${{ parameters.releaseTag }}

  pool: ${{ parameters.pool }}
  timeoutInMinutes: 135

  displayName: ${{ parameters.jobName }}

  steps:
  - powershell: |
      Write-Host "##vso[task.setvariable variable=ACR_NAME;]$env:ACR_NAME_VAR"
    displayName: 'Enable ACR'
    condition: ne(variables['ACR'], 'no')

  - powershell: |
      $version = '$(releaseTag)' -replace '^v', ''
      Write-Host "##vso[task.setvariable variable=Version;]$version"
    displayName: 'Set Version'

  - powershell: |
      $namespace = '$(releaseTag)'.ToLowerInvariant()
      Write-Host "##vso[task.setvariable variable=dockerNamespace;]$namespace"
    displayName: 'Set dockerNamespace'

  - powershell: 'Get-ChildItem env:'
    displayName: 'Capture Environment'

  - powershell: 'docker login $(dockerHost) -u $(dockerUserName) -p $(dockerKey)'
    displayName: 'docker login'

  - powershell: ' az login --service-principal -u $(az_url) -p $(az_key) --tenant $(az_name)'
    displayName: 'az login'

  - powershell: |
      $querystring = az storage account generate-sas --account-name $(storageAccountName) --services b --resource-types o --expiry ((get-date).AddDays(2).ToString("yyyy-MM-dd")) --permission r --https-only | convertfrom-json
      $url = "https://$(storageAccountName).blob.core.windows.net/?$querystring"
      Write-Host "##vso[task.setvariable variable=SasUrl;]$url"
    displayName: 'Set SasUrl variable'

  - powershell: 'Install-module pester -Scope CurrentUser -Force -SkipPublisherCheck'
    displayName: 'Install Pester'

  - powershell: |
      $extraParams = @{}
      if($env:ACR -eq 'no')
      {
        Write-Host 'Not in ACR, will push...'
        $extraParams.Add('Push',$true)
      }
      else
      {
        Write-Host 'Using ACR, will NOT test behavior...'
        $extraParams.Add('SkipTest',$true)
      }

      if($env:SASURL)
      {
        Write-Host 'Using SasUrl...'
        $extraParams.Add('SasUrl',$env:SASURL)
      }

      if($env:$(Channel) -eq 'true')
      {
        ./build.ps1 -Build -ImageName $(dockerHost)/$(dockerNamespace)/$(dockerImage) -All -Channel $(channel) @extraParams -version '$(Version)'
      }
      else
      {
        Write-Host 'Current channel disabled, skipping ...'
      }
    displayName: 'Build All $(Channel)'

  - powershell: 'docker logout $(dockerHost)'
    displayName: 'docker logout'
    condition: always()

  - powershell: 'az logout'
    displayName: 'az logout'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      sourceScanPath: '$(Build.SourcesDirectory)'
      snapshotForceEnabled: true
