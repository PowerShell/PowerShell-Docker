parameters:
  vmImage: 'ubuntu-16.04'
  jobName: 'none'
  releaseTag: ''
  matrix: ''
  maxParallel: 5
  dependsOn: []

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}
  strategy:
      matrix: $[ ${{ parameters.matrix }} ]
      maxParallel: ${{ parameters.maxParallel }}
  variables:
    dockerImage: 'powershellcommunity'
    Channel: ${{ parameters.channel }}
    ACR: ${{ parameters.ACR }}
    releaseTag: ${{ parameters.releaseTag }}

  pool:
    vmImage: ${{ parameters.vmImage }}
  timeoutInMinutes: 135


  steps:
  - pwsh: |
      Get-ChildItem env: | Out-String -Width 1000
    displayName: 'Capture Environment'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: 'docker login $(dockerHost) -u $(dockerUserName) -p $(dockerKey)'
    displayName: 'docker login'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: 'Install-module pester -Scope CurrentUser -Force -SkipPublisherCheck'
    displayName: 'Install Pester'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      ./build.ps1 -Build -ImageName $(dockerHost) -name '$(ImageName)' -Channel $(channel) -TestLogPostfix '$(ImageName)-$(Channel)' -Push -Repository $(dockerNamespace)/$(dockerImage)
    displayName: 'Build'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: 'docker logout $(dockerHost)'
    displayName: 'docker logout'
    condition: and( always(), ne(variables['Channel'],''))
