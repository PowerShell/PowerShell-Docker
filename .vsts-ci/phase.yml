parameters:
  name: ''
  imagename: ''
  vmImage: 'ubuntu-16.04'
  stable: 'true'
  servicing: 'false'
  preview: 'true'
  communityStable: 'false'
  communityPreview: 'false'
  communityServicing: 'false'
  continueonerror: false
  ciParameter: '-CI'

jobs:
- job: ${{ parameters.name }}
  variables:
    ImageName: ${{ parameters.imagename }}
    ContinueOnError: ${{ parameters.continueonerror }}

  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - pwsh: Install-module pester -Scope CurrentUser -Force
    displayName: Install Pester
    condition: succeededOrFailed()

  - ${{ if eq(parameters.stable, 'true') }}:
    - pwsh: ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel 'stable' -TestLogPostfix '$(ImageName)-stable' ${{ parameters.ciParameter }} -Repository stable/powershell
      displayName: $(ImageName) Stable
      condition: succeededOrFailed()
      continueOnError: ${{ parameters.continueonerror }}

  - ${{ if eq(parameters.preview, 'true') }}:
    - pwsh: ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel 'preview' -TestLogPostfix '$(ImageName)-preview' ${{ parameters.ciParameter }} -Repository preview/powershell
      displayName: $(ImageName) Preview
      condition: succeededOrFailed()
      continueOnError: ${{ parameters.continueonerror }}

  - ${{ if eq(parameters.servicing, 'true') }}:
    - pwsh: ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel 'servicing' -TestLogPostfix '$(ImageName)-servicing' ${{ parameters.ciParameter }} -Repository servicing/powershell
      displayName: $(ImageName) Servicing
      condition: succeededOrFailed()
      continueOnError: ${{ parameters.continueonerror }}

  - ${{ if eq(parameters.communityStable, 'true') }}:
    - pwsh: ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel 'community-stable' -TestLogPostfix '$(ImageName)-stable' ${{ parameters.ciParameter }} -Repository stable/powershell
      displayName: $(ImageName) Stable
      condition: succeededOrFailed()
      continueOnError: ${{ parameters.continueonerror }}

  - ${{ if eq(parameters.communityPreview, 'true') }}:
    - pwsh: ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel 'community-preview' -TestLogPostfix '$(ImageName)-preview' ${{ parameters.ciParameter }} -Repository preview/powershell
      displayName: $(ImageName) Preview
      condition: succeededOrFailed()
      continueOnError: ${{ parameters.continueonerror }}

  - ${{ if eq(parameters.communityServicing, 'true') }}:
    - pwsh: ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel 'community-servicing' -TestLogPostfix '$(ImageName)-servicing' ${{ parameters.ciParameter }} -Repository servicing/powershell
      displayName: $(ImageName) Servicing
      condition: succeededOrFailed()
      continueOnError: ${{ parameters.continueonerror }}

  - pwsh: |
      $files = @(Get-ChildItem -Recurse test*.xml)
      if($files.count -eq 0) {
        throw 'no test results found'
      }
    displayName: Make sure we got test results
    condition: succeededOrFailed()
    continueOnError: ${{ parameters.continueonerror }}

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: Publish $(ImageName) Test Results **\test*.xml
    continueOnError: ${{ parameters.continueonerror }}
    inputs:
      testRunner: NUnit
      testResultsFiles: '**\test*.xml'
      testRunTitle: $(ImageName)
      mergeTestResults: true
