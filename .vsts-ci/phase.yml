parameters:
  name: ''
  vmImage: 'ubuntu-18.04'
  continueonerror: false
  ciParameter: '-CI'
  useacr: 'false'
  matrix: ''
  dependsOn: 'GenerateYaml'
  jobName: 'Build'
  maxParallel: 5

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}
  strategy:
      matrix: $[ ${{ parameters.matrix }} ]
      maxParallel: ${{ parameters.maxParallel }}
  variables:
    ContinueOnError: ${{ parameters.continueonerror }}

  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - ${{ if eq(parameters.useacr, 'true') }}:
    - pwsh: |
        Write-Host "##vso[task.setvariable variable=ACR_NAME;]$env:ACR_NAME_VAR"
      displayName: 'Enable ACR'
      condition: ne(variables['ACR'], 'no')

  - pwsh: 'Get-ChildItem env:'
    displayName: 'Capture Environment'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - ${{ if eq(parameters.useacr, 'true') }}:
    - pwsh: 'az login --service-principal -u $(az_url) -p $(az_key) --tenant $(az_name)'
      displayName: 'az login'
      condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      if ( '$env:CHANNEL' -eq '' ) { exit }
      Install-module pester -Scope CurrentUser -Force
    displayName: Install Pester
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: Setup Python engine

  - bash: |
      git clone https://github.com/RDIL/dockerlint.git
      git checkout 0.1.0-alpha3
      make install-deps
      make build-packages
    displayName: Download dockerlint
    condition: succeeded()

  - bash: python3 main.py -d release/$Channel/$ImageName/docker/Dockerfile
    displayName: Run dockerlint
    condition: succeeded()

  - pwsh: |
      $extraParams = @{}
      if($env:ACR_NAME)
      {
        Write-Host 'Using ACR, will NOT test behavior...'
        $extraParams.Add('SkipTest',$true)
      }

      ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel '$(Channel)' -TestLogPostfix '$(ImageName)-$(Channel)' @extraParams ${{ parameters.ciParameter }} -Repository $(Channel)/powershell
    displayName: $(ImageName) $(Channel)
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))
    continueOnError: ${{ variables.continueonerror }}

  - pwsh: |
      if ( '$env:CHANNEL' -eq '' ) { exit }
      $files = @(Get-ChildItem -Recurse test*.xml)
      if($files.count -eq 0) {
        throw 'no test results found'
      }
    displayName: Make sure we got test results
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))
    continueOnError: ${{ variables.continueonerror }}

  - task: PublishTestResults@2
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))
    displayName: Publish $(ImageName) Test Results **\test*.xml
    continueOnError: ${{ variables.continueonerror }}

    inputs:
      testRunner: NUnit
      testResultsFiles: '**\test*.xml'
      testRunTitle: $(ImageName)
      mergeTestResults: true
