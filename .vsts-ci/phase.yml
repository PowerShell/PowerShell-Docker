parameters:
  - name: name
    default: ''
  - name: vmImage
    default: 'ubuntu-latest'
  - name: pool
    default: ''
  - name: continueonerror
    default: false
  - name: ciParameter
    default: '-CI'
  - name: useacr
    default: 'false'
  - name: matrix
    default: ''
  - name: dependsOn
    default: 'GenerateYaml'
  - name: jobName
    default: 'Build'
  - name: maxParallel
    default: 5

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}
  strategy:
      matrix: $[ ${{ parameters.matrix }} ]
      maxParallel: ${{ parameters.maxParallel }}

  variables:
    ContinueOnError: ${{ parameters.continueonerror }}
    scanType: Register
    pool: ${{ parameters.pool }}

  pool:
    ${{ if eq(parameters['pool'],'')}}:
      vmImage: ${{ parameters.vmImage }}
    ${{ else }}:
      name: ${{ parameters.pool }}
      demands:
        - ImageOverride -equals ${{ parameters.vmImage }}

  steps:
  - ${{ if eq(parameters.useacr, 'true') }}:
    - pwsh: |
        Write-Host "##vso[task.setvariable variable=ACR_NAME;]$env:ACR_NAME_VAR"
      displayName: 'Enable ACR'
      condition: ne(variables['ACR'], 'no')

  - pwsh: |
      Write-Verbose -verbose "pshome: $pshome"
      $psversiontable
    displayName: PowerShell Info
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=scanType;]LogOnly"
    displayName: Set scanType to LogOnly For PRs
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - pwsh: 'Get-ChildItem env:'
    displayName: 'Capture Environment'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - ${{ if eq(parameters.useacr, 'true') }}:
    - pwsh: 'az login --service-principal -u $(az_url) -p $(az_key) --tenant $(az_name)'
      displayName: 'az login'
      condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      if ( '$env:CHANNEL' -eq '' ) { exit }
      Install-module Pester -Scope CurrentUser -Force -MaximumVersion 4.99
    displayName: Install Pester
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      $extraParams = @{}
      if($env:ACR_NAME)
      {
        Write-Host 'Using ACR, will NOT test behavior...'
        $extraParams.Add('SkipTest',$true)
      }

      ./build.ps1 -build -name '$(ImageName)' -IncludeKnownIssues -Channel '$(Channel)' -TestLogPostfix '$(ImageName)-$(Channel)' @extraParams ${{ parameters.ciParameter }} -Repository $(Channel)/powershell
    displayName: $(ImageName) $(Channel)
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))
    continueOnError: ${{ variables.continueonerror }}

  - pwsh: |
      Get-ChildItem env:\docker*
    displayName: 'Capture Docker* Environment Variables'
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - pwsh: |
      if ( '$env:CHANNEL' -eq '' ) { exit }
      $files = @(Get-ChildItem -Recurse test*.xml)
      if($files.count -eq 0) {
        throw 'no test results found'
      }
    displayName: Make sure we got test results
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))
    continueOnError: ${{ variables.continueonerror }}

  - task: PublishTestResults@2
    condition: and( succeededOrFailed(), ne(variables['Channel'],''), eq(variables['pool'],''))
    displayName: Publish $(ImageName) Test Results **\test*.xml
    continueOnError: ${{ variables.continueonerror }}

    inputs:
      testRunner: NUnit
      testResultsFiles: '**\test*.xml'
      testRunTitle: $(ImageName)
      mergeTestResults: true

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 7.x

  - pwsh: |
      dotnet --list-sdks
    displayName: dotnet info
    condition: and( succeededOrFailed(), ne(variables['Channel'],''))

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      dockerImagesToScan: $(dockerImagesToScan)
      scanType: $(scanType)
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
      failOnAlert: true
    displayName: Component Governance - $(ImageName) $(Channel)
    condition: |
      and(
          succeededOrFailed(),
          ne(variables['Channel'],'')
        )

