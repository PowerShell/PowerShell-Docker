# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneBranch template
name: s_$(stableReleaseTag)_p_$(previewReleaseTag)_l_$(ltsReleaseTag)$(Rev:_rr)
parameters:
- name: 'previewReleaseTag'
  default: 'v7.4.0-preview.4'
- name: 'ltsReleaseTag'
  default: 'v7.2.12'
- name: 'stableReleaseTag'
  default: 'v7.3.5'
resources:
  repositories:
  - repository: onebranchTemplates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main
variables:
- name: POWERSHELL_TELEMETRY_OPTOUT
  value: 1
- name: DOCKER_RELEASE
  value: true
- name: previewReleaseTag
  value: ${{ parameters.previewReleaseTag }}
- name: ltsReleaseTag
  value: ${{ parameters.ltsReleaseTag }}
- name: stableReleaseTag
  value: ${{ parameters.stableReleaseTag }}
- name: runCodesignValidationInjection
  value: false
- name: DisableDockerDetector
  value: true
- name: LinuxContainerImage
  value: onebranch.azurecr.io/linux/ubuntu-2004:latest
- name: WindowsContainerImage
  value: onebranch.azurecr.io/windows/ltsc2019/vse2022:latest
extends:
  template: v2/OneBranch.Official.CrossPlat.yml@onebranchTemplates
  parameters:
    customTags: 'ES365AIMigrationTooling-BulkMigrated'
    stages:
    - stage: GenerateFullTag
      displayName: Generate Full Tag
      jobs:
      - job: GenerateFullTag
        displayName: Generate Full Tag
        condition: succeededOrFailed()
        pool:
          timeoutInMinutes: 30
          type: windows
        variables:
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        steps:
        - pwsh: |
            if ($env:PREVIEWRELEASETAG -notmatch '^v\d+\.\d+\.\d+-(preview|rc)\.\d+$') {
              throw "preview release tag is not for a preview build: '${env:PREVIEWRELEASETAG}'"
            }
          displayName: stop build if preview release tag does not match preview format
        - pwsh: |
            if ($env:STABLERELEASETAG -notmatch '^v\d+\.\d+\.\d+$') {
              throw "stable release tag is not for a stable build: '${env:STABLERELEASETAG}'"
            }
          displayName: stop build if stable release tag does not match stable format
        - pwsh: |
            if ($env:LTSRELEASETAG -notmatch '^v\d+\.\d+\.\d+$') {
              throw "LTS release tag is not for a stable build: '${env:LTSRELEASETAG}'"
            }
          displayName: stop build if LTS release tag does not match stable format
        - pwsh: |
            $path = '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/BuildMeta.json'
            @{
              FullTag = (Get-Date).ToString("yyyyMMdd")
            } | ConvertTo-Json | Out-File -Encoding utf8NoBOM -FilePath ./BuildMeta.json
            Write-Host "##vso[artifact.upload containerfolder=buildMeta;artifactname=buildMeta]$path"
          displayName: Create BuildMeta Json with FullTag
    - template: /.vsts-ci/releaseStage.yml@self
      parameters:
        channel: stable
    - template: /.vsts-ci/releaseStage.yml@self
      parameters:
        channel: preview
    - template: /.vsts-ci/releaseStage.yml@self
      parameters:
        channel: lts
    - stage: GenerateManifests
      dependsOn:
      - GenerateYaml_stable
      - GenerateYaml_preview
      - GenerateYaml_lts
      jobs:
      - job: PreviewManifestPhase
        variables:
        - name: releaseTag
          value: $(previewReleaseTag)
        - name: channel
          value: PREVIEW
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        displayName: Create Preview Manifest Lists
        condition: succeededOrFailed()
        pool:
          type: windows
        timeoutInMinutes: 30
        steps:
        - template: /.vsts-ci/manifestSteps.yml@self
      - job: LtsManifestPhase
        variables:
        - name: releaseTag
          value: $(ltsReleaseTag)
        - name: channel
          value: LTS
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        displayName: Create Lts Manifest Lists
        condition: succeededOrFailed()
        pool:
          type: windows
        timeoutInMinutes: 30
        steps:
        - template: /.vsts-ci/manifestSteps.yml@self
      - job: StableManifestPhase
        variables:
        - name: releaseTag
          value: $(stableReleaseTag)
        - name: channel
          value: STABLE
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        displayName: Create Stable Manifest Lists
        condition: succeededOrFailed()
        pool:
          type: windows
        timeoutInMinutes: 30
        steps:
        - template: /.vsts-ci/manifestSteps.yml@self
    - stage: GenerateTagsYaml
      dependsOn: ['GenerateFullTag']
      jobs:
      - job: GenerateTagsYaml
        displayName: Generate Tags YAML
        condition: succeededOrFailed()
        pool:
          type: windows
        timeoutInMinutes: 30
        variables:
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifacts'
          inputs:
            downloadType: specific
            itemPattern: buildMeta/**/*.json
        - powershell: |
            $json = Get-ChildItem $(System.ArtifactsDirectory)/buildmeta.json -recurse -File
            if($json.Count -ge 1)
            {
              $jsonText = Get-Content -Path $json.FullName
              $fullTag = ($jsonText | ConvertFrom-Json).FullTag
              Write-Verbose "setting FULL_TAG to $fullTag" -verbose
              Write-Host "##vso[task.setvariable variable=FULL_TAG;]$fullTag"
            }
            else{
              Write-Verbose "Did not find buildmeta json" -verbose
            }
          displayName: Set FULL_TAG variable
        - powershell: |
            $stableVersion = '$(stableReleaseTag)' -replace '^v', ''
            Write-Host "##vso[task.setvariable variable=StableVersion;]$stableVersion"
            $previewVersion = '$(previewReleaseTag)' -replace '^v', ''
            Write-Host "##vso[task.setvariable variable=PreviewVersion;]$previewVersion"
            $ltsVersion = '$(ltsReleaseTag)' -replace '^v', ''
            Write-Host "##vso[task.setvariable variable=LtsVersion;]$ltsVersion"
          displayName: 'Set Versions'
        - powershell: 'Get-ChildItem env:'
          displayName: 'Capture Environment'
        - powershell: Install-module Pester -Scope CurrentUser -Force -MaximumVersion 4.99
          displayName: 'Install Pester'
        - powershell: |
            $yaml = ./build.ps1 -GenerateTagsYaml -Channel stable, preview, lts -StableVersion $(StableVersion) -PreviewVersion $(PreviewVersion) -LtsVersion $(LtsVersion)
            $yaml | Out-File -Encoding ascii -Path ./tagsmetadata.yaml
            Get-ChildItem -Path ./tagsmetadata.yaml | Select-Object -ExpandProperty FullName | ForEach-Object {
                    Write-Host "##vso[artifact.upload containerfolder=artifacts;artifactname=artifacts]$_"
                }
          displayName: Generate Tags YAML
        - powershell: |
            $path = '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/releaseTags.json'
            @{
              'previewReleaseTag' = '$(previewReleaseTag)'
              'stableReleaseTag' = '$(stableReleaseTag)'
              'ltsReleaseTag' = '$(ltsReleaseTag)'
            }|convertto-json | out-file -FilePath $path -Encoding ascii
            Write-Host "##vso[artifact.upload containerfolder=releaseTags;artifactname=releaseTags]$path"
          displayName: Save release Tags
