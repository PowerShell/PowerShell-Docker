name: s_$(stableReleaseTag)_p_$(previewReleaseTag)_l_$(ltsReleaseTag)$(Rev:_rr)

resources:
- repo: self
  clean: true

variables:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOCKER_RELEASE: true

stages:
  - stage: GenerateFullTag
    displayName: Generate Full Tag
    jobs:
    - job: GenerateFullTag

      displayName: Generate Full Tag

      condition: succeededOrFailed()
      pool:
        vmImage: ubuntu-latest
        timeoutInMinutes: 30

      steps:
      - pwsh: |
          $path = '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/BuildMeta.json'
          @{
            FullTag = (Get-Date).ToString("yyyyMMdd")
          } | ConvertTo-Json | Out-File -Encoding utf8NoBOM -FilePath ./BuildMeta.json
          Write-Host "##vso[artifact.upload containerfolder=buildMeta;artifactname=buildMeta]$path"
  - template: releaseStage.yml
    parameters:
      channel: stable
  - template: releaseStage.yml
    parameters:
      channel: preview
  - template: releaseStage.yml
    parameters:
      channel: lts

  - stage: GenerateManifests
    dependsOn:
      - GenerateYaml_stable
      - GenerateYaml_preview
      - GenerateYaml_lts
    jobs:
    - job: PreviewManifestPhase
      variables:
        releaseTag: $(previewReleaseTag)
        channel: PREVIEW

      displayName: Create Preview Manifest Lists
      condition: succeededOrFailed()
      pool:
        vmImage: windows-latest
        timeoutInMinutes: 30

      steps:
      - template: manifestSteps.yml

    - job: StableManifestPhase
      variables:
        releaseTag: $(stableReleaseTag)
        channel: STABLE

      displayName: Create Stable Manifest Lists

      condition: succeededOrFailed()
      pool:
        vmImage: windows-latest
        timeoutInMinutes: 30

      steps:
      - template: manifestSteps.yml

  - stage: GenerateTagsYaml
    dependsOn: ['GenerateFullTag']
    jobs:
    - job: GenerateTagsYaml

      displayName: Generate Tags YAML

      condition: succeededOrFailed()
      pool:
        name: Hosted Ubuntu 1604
        timeoutInMinutes: 30

      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Build Artifacts'
        inputs:
          downloadType: specific
          itemPattern: buildMeta/**/*.json
      - powershell: |
          $json = Get-ChildItem $(System.ArtifactsDirectory)/buildmeta.json -recurse -File
          if($json.Count -ge 1)
          {
            $jsonText = Get-Content -Path $json.FullName
            $fullTag = ($jsonText | ConvertFrom-Json).FullTag
            Write-Verbose "setting FULL_TAG to $fullTag" -verbose
            Write-Host "##vso[task.setvariable variable=FULL_TAG;]$fullTag"
          }
          else{
            Write-Verbose "Did not find buildmeta json" -verbose
          }
        displayName: Set FULL_TAG variable

      - powershell: |
          $stableVersion = '$(stableReleaseTag)' -replace '^v', ''
          Write-Host "##vso[task.setvariable variable=StableVersion;]$stableVersion"
          $previewVersion = '$(previewReleaseTag)' -replace '^v', ''
          Write-Host "##vso[task.setvariable variable=PreviewVersion;]$previewVersion"
          $ltsVersion = '$(ltsReleaseTag)' -replace '^v', ''
          Write-Host "##vso[task.setvariable variable=LtsVersion;]$ltsVersion"
        displayName: 'Set Versions'

      - powershell: 'Get-ChildItem env:'
        displayName: 'Capture Environment'

      - powershell: Install-module Pester -Scope CurrentUser -Force -MaximumVersion 4.99
        displayName: 'Install Pester'

      - powershell: |
            $yaml = ./build.ps1 -GenerateTagsYaml -Channel stable, preview, lts -StableVersion $(StableVersion) -PreviewVersion $(PreviewVersion) -LtsVersion $(LtsVersion)
            $yaml | Out-File -Encoding ascii -Path ./tagsmetadata.yaml
            Get-ChildItem -Path ./tagsmetadata.yaml | Select-Object -ExpandProperty FullName | ForEach-Object {
                    Write-Host "##vso[artifact.upload containerfolder=artifacts;artifactname=artifacts]$_"
                }
        displayName: Generate Tags YAML

      - powershell: |
          $path = '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/releaseTags.json'
          @{
            'previewReleaseTag' = '$(previewReleaseTag)'
            'stableReleaseTag' = '$(stableReleaseTag)'
            'ltsReleaseTag' = '$(ltsReleaseTag)'
          }|convertto-json | out-file -FilePath $path -Encoding ascii
          Write-Host "##vso[artifact.upload containerfolder=releaseTags;artifactname=releaseTags]$path"
        displayName: Save release Tags

      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: 'Component Detection'
        inputs:
          sourceScanPath: '$(Build.SourcesDirectory)'
          snapshotForceEnabled: true
