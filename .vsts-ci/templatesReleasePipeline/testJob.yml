parameters:
  vmImage: 'ubuntu-16.04'
  jobName: 'none'
  releaseTag: ''
  ACR: 'no'
  maxParallel: 5
  dependsOn: []
  tafFilter: ''

jobs:
  - job: ${{ parameters.jobName }}
    dependsOn:
      ${{ parameters.dependsOn }}
    strategy:
        matrix: $[ ${{ parameters.matrix }} ]
        maxParallel: ${{ parameters.maxParallel }}
    variables:
      - group: 'Staging_ACR'
      - name: 'dockerImage'
        value: 'powershell'
      - name: "Channel"
        value: ${{ parameters.channel }}
      - name: "ACR"
        value: ${{ parameters.ACR }}
      - name: "releaseTag"
        value: ${{ parameters.releaseTag }}

    pool:
      vmImage: ${{ parameters.vmImage }}
    timeoutInMinutes: 30

    displayName: ${{ parameters.jobName }}

    steps:
    - download: releasePipeline
      displayName: Download build meta json
      artifact: buildMeta
      patterns: '**/*.json'

    - download: releasePipeline
      displayName: Download release tags json
      artifact: releaseTags
      patterns: '**/*.json'

    - pwsh: ' Install-module Pester -Scope CurrentUser -Force -MaximumVersion 4.99'
      displayName: 'Install Pester'
    - pwsh: |
            $json = Get-ChildItem "${ENV:PIPELINE_WORKSPACE}/buildmeta.json" -recurse -File
            if($json.Count -ge 1)
            {
                $jsonText = Get-Content -Path $json.FullName
                $fullTag = ($jsonText | ConvertFrom-Json).FullTag
                Write-Verbose "setting FULL_TAG to $fullTag" -verbose
                Write-Host "##vso[task.setvariable variable=FULL_TAG;]$fullTag"
            }
            else{
                Write-Verbose "Did not find buildmeta json" -verbose
            }
      displayName: 'Set Full Tag'

    - task: PowerShell@2
      displayName: 'Deserialize Release Tags'
      inputs:
        targetType: 'filePath'
        filePath: .vsts-ci/templatesGeneric/deserializeTags.ps1
        pwsh: true

    - template: ../templatesGeneric/setVersionStepsTemplate.yml

    - pwsh: |
        Get-ChildItem env: | Out-String -Width 1000
      displayName: 'Capture Environment'

    - pwsh: 'docker login $(dockerHost) -u $(dockerUserName) -p "$(dockerKey)"'
      displayName: 'docker login'

    - pwsh: |
            $tagFilter = '${{ parameters.tagFilter}}'
            $extraParams = @{}
            if($tagFilter)
            {
              $extraParams.Add('TagFilter',$tagFilter)
            }
            .\build.ps1 -test -Channel $(Channel) -Pull -ImageName $(dockerHost) -name '$(ImageName)' -Version $(Version) -TestLogPostfix windows-$(Channel) -Repository $(dockerNamespace)/powershell @extraParams
      displayName: 'Run Tests for $(Channel) - $(ImageName)'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/test*.xml'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '**/test*.xml'
        testRunTitle: 'Linux $(Channel)'
      continueOnError: true
      condition: succeededOrFailed()

    - pwsh: 'docker logout'
      displayName: 'docker logout'
      condition: always()
