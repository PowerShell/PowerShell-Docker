steps:
- pwsh: |
    $namespace = '$(releaseTag)'.ToLowerInvariant()
    Write-Host "##vso[task.setvariable variable=dockerNamespace;]$namespace"
  displayName: 'Set dockerNamespace'
- pwsh: 'Get-ChildItem env:'
  displayName: 'Capture Environment'
- pwsh: |
    $PSVersionTable
  displayName: Capture pwsh Version
- pwsh: |
    $dockerConfigFolder = "$env:userprofile/.docker"
    if(!(Test-Path $dockerConfigFolder)){ $null = new-item -Type Directory -Path $dockerConfigFolder}
    $dockerCliConfig = "$env:userprofile/.docker/config.json"
    $dockerCliBackup = "$env:userprofile/.docker/config-backup.json"
    if(Test-Path $dockerCliConfig) { copy-item $dockerCliConfig $dockerCliBackup -force}
    @{experimental='enabled'}|ConvertTo-Json | Out-File -Encoding ascii -FilePath $dockerCliConfig
  displayName: 'enable docker cli experimental features'
- pwsh: 'docker login $(dockerHost) -u $(dockerUserName) -p $(dockerKey)'
  displayName: 'docker login'
- pwsh: |
    ./createAllManifests.ps1 -Registry '$(dockerHost)/public/$(dockerNamespace)' -Channel $(Channel)
  displayName: 'Create $(Channel) Manifest Lists'
- pwsh: 'docker logout $(dockerHost)'
  displayName: 'docker logout'
  condition: always()
